# ###################################
# This file is managed by puppet
# PLEASE DON'T MODIFY BY HAND
# ###################################

storage.machine.db.collection=snapshots
storage.machine.db.url=localhost:27017
storage.machine.db.name=<%= scope.lookupvar('all_in_one::install::mongo_machine_db_name') %>
storage.machine.db.username=<%= scope.lookupvar('all_in_one::install::mongo_machine_user_name') %>
storage.machine.db.password=<%= scope.lookupvar('all_in_one::install::mongo_machine_password') %>

machine.project.location=/home/codenvy/codenvy-data/che-machines
machine.logs.location=/home/codenvy/codenvy-data/che-machines-logs

# docker.registry
machine.docker.registry=<%= scope.lookupvar('all_in_one::install::host_url') %>:5000
machine.docker.unused_containers_cleanup_period_min=60
# custom registry credentials for docker client
docker.registry.auth.url=<%= scope.lookupvar('all_in_one::install::docker_registry_auth_url') %>
docker.registry.auth.username=<%= scope.lookupvar('all_in_one::install::docker_registry_auth_username') %>
docker.registry.auth.password=<%= scope.lookupvar('all_in_one::install::docker_registry_auth_password') %>

# swarm
docker.client.daemon_url=http://<%= scope.lookupvar('all_in_one::install::host_url') %>:23750
swarm.client.node_description_length=10

# terminal
machine.server.terminal.path_to_archive.linux_amd64=/home/codenvy/terminal

# ws agent
machine.server.ext.archive=/home/codenvy/archives/ext-server.zip
machine.ws_agent.run_command=<%= scope.lookupvar('all_in_one::install::machine_ws_agent_run_command') %>
machine.ws_agent.max_start_time_ms=<%= scope.lookupvar('all_in_one::install::machine_ws_agent_max_start_time_ms') %>
machine.ws_agent.ping_delay_ms=2000
machine.ws_agent.ping_conn_timeout_ms=2000
machine.ws_agent.ping_timed_out_error_msg=Timeout reached. Codenvy is unable to verify that your workspace's agent has successfully booted. Either the workspace is unreachable, the agent had an error during startup, or your workspace is starting slowly. Admins can configure machine_ws_agent_max_start_time_ms to increase the timeout.
machine.ws_agent.agent_api.path=/wsagent/ext/
machine.ws_agent.inactive_stop_timeout_ms=<%= scope.lookupvar('all_in_one::install::machine_ws_agent_inactive_stop_timeout_ms') %>

router.nats.url=nats://localhost:4222
machine.router.routing_pattern=%4$s-%1$s.machines.<%= scope.lookupvar('all_in_one::install::host_url') %>

# backup
machine.backup.backup_script=/usr/local/bin/rsyncbackup.sh
machine.backup.restore_script=/usr/local/bin/rsyncrestore.sh
machine.backup.backup_duration_second=300
machine.backup.restore_duration_second=300
machine.backup.backup_period_second=300

# machine default memory allocation
machine.default_mem_size_mb=<%= scope.lookupvar('all_in_one::install::machine_default_mem_size_mb') %>

# path to machine predefined recipes
local.recipe.path=

# extra hosts which will be used in machines
machine.docker.machine_extra_hosts=<%= scope.lookupvar('all_in_one::install::machine_extra_hosts') %>
docker.connection.tcp.connection_timeout_ms=600000
docker.connection.tcp.read_timeout_ms=600000
machine.docker.pull_image=true

# https support
machine.proxy_wsagent_server_url_template=<%= scope.lookupvar('all_in_one::install::host_protocol') %>://<%= scope.lookupvar('all_in_one::install::host_url') %>:<% if scope.lookupvar('all_in_one::install::host_protocol') == "https" %>444<% else %>81<% end %>/%3$s_%2$s/%4$s
machine.proxy_terminal_server_url_template=<%= scope.lookupvar('all_in_one::install::host_protocol') %>://<%= scope.lookupvar('all_in_one::install::host_url') %>:<% if scope.lookupvar('all_in_one::install::host_protocol') == "https" %>444<% else %>81<% end %>/%3$s_%2$s/%4$s


# If true, then all docker machines will start in privilege mode.
machine.docker.privilege_mode=<%= scope.lookupvar('all_in_one::install::machine_docker_privilege_mode') %>

machine.docker.server.terminal.run_command=mkdir -p ~/che && cp /mnt/che/terminal -R ~/che && ~/che/terminal/che-websocket-terminal -addr :4411 -cmd /bin/bash -static ~/che/terminal/ -path '/[^/]+'

# Allows to use registry for machine docker snapshots, you should set this property to {true},
# otherwise workspace snapshots would be saved locally.
machine.docker.snapshot_use_registry=true

# Allows to adjust machine swap memory by multiplication current machnine memory on provided value.
# default is 0 which means disabled swap, if set multiplier value equal to 0.5 machine swap will be
# configured with size that equal to half of current machine memory.
machine.docker.memory_swap_multiplier=<%= scope.lookupvar('all_in_one::install::machine_docker_memory_swap_multiplier') %>
